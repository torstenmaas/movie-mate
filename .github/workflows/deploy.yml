name: Deploy to Coolify (GHCR)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Optional image tag (besides :main and :<sha7>)'
        required: false
  workflow_run:
    workflows: ['CI']
    types: [completed]

concurrency:
  group: deploy-main
  cancel-in-progress: false

jobs:
  build-push:
    name: Build & Push Image (GHCR)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image refs
        id: prep
        run: |
          IMAGE=$(echo ghcr.io/${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push image
        run: |
          IMAGE=${{ steps.prep.outputs.image }}
          SHA=${{ steps.prep.outputs.sha }}
          docker build --build-arg IMAGE_COMMIT="${GITHUB_SHA}" --build-arg SOURCE_COMMIT="${GITHUB_SHA}" -t "$IMAGE:$SHA" -f Dockerfile .
          docker tag "$IMAGE:$SHA" "$IMAGE:main"
          if [ -n "${{ github.event.inputs.tag }}" ]; then docker tag "$IMAGE:$SHA" "$IMAGE:${{ github.event.inputs.tag }}"; fi
          docker push "$IMAGE:$SHA"
          docker push "$IMAGE:main"
          if [ -n "${{ github.event.inputs.tag }}" ]; then docker push "$IMAGE:${{ github.event.inputs.tag }}"; fi

  coolify-deploy:
    name: Trigger Coolify Deploy Webhook
    runs-on: ubuntu-latest
    environment: PROD
    needs: [build-push]
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Trigger Coolify Deploy Webhook
        if: ${{ env.COOLIFY_WEBHOOK_URL != '' }}
        run: |
          if [ -n "$COOLIFY_API_TOKEN" ]; then \
            curl -fsS -X POST -H "Authorization: Bearer $COOLIFY_API_TOKEN" "$COOLIFY_WEBHOOK_URL" || exit 1; \
          else \
            curl -fsS -X POST "$COOLIFY_WEBHOOK_URL" || exit 1; \
          fi
        env:
          COOLIFY_WEBHOOK_URL: ${{ secrets.COOLIFY_WEBHOOK_URL }}
          COOLIFY_API_TOKEN: ${{ secrets.COOLIFY_API_TOKEN }}

  live-smoke:
    name: Live Readiness Smoke
    runs-on: ubuntu-latest
    environment: PROD
    needs: [coolify-deploy]
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Readiness smoke (public)
        run: |
          URL="https://movie-mate.de/api/v1/health/ready"
          EXPECT="${GITHUB_SHA::7}"
          echo "Expecting commit: $EXPECT"
          for i in {1..12}; do
            # Get JSON and status code
            body=$(curl -fsS "$URL" -w "\n%{http_code}" || true)
            code=$(echo "$body" | tail -n1)
            json=$(echo "$body" | sed '$d')
            if [ "$code" = "200" ]; then
              commit=$(echo "$json" | jq -r '.commit // empty' 2>/dev/null || true)
              if [ -n "$commit" ] && [ "$commit" = "$EXPECT" ]; then
                echo "Ready: $URL (200, commit $commit)"; exit 0
              fi
              echo "Attempt $i/12 -> 200 but commit='$commit' != '$EXPECT'; retrying in 10s…"; sleep 10
              continue
            fi
            echo "Attempt $i/12 -> $code; retrying in 10s…"; sleep 10
          done
          echo "Live readiness failed for $URL (commit did not match $EXPECT)"; exit 1
