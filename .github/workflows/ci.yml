name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node zuerst
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true

      # pnpm installieren (vor dem Caching!)
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0
          run_install: false

      # pnpm-Store cachen
      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install / Lint / Typecheck / Test
      - name: Install
        run: pnpm install --frozen-lockfile=false

      - name: Format check
        run: pnpm format:check

      - name: Lint
        run: pnpm lint

      - name: Typecheck
        run: pnpm typecheck

      - name: Warn on dev default secrets (non-blocking)
        run: rg -n "dev-(refresh-)?secret-change-me" -g '!**/.env.example' -g '!docs/**' || true

      - name: Test with coverage
        run: pnpm exec jest --coverage --passWithNoTests --coverageReporters=text --coverageReporters=lcov --coverageReporters=json-summary --coverageReporters=html --runInBand

      - name: Show coverage folder (debug)
        if: always()
        run: |
          ls -la || true
          ls -la coverage || true

      - name: Upload HTML coverage (CI)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-ci
          path: coverage/lcov-report
        if: always()

      - name: Upload coverage artifacts (CI)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-ci
          path: |
            coverage/lcov.info
            coverage/coverage-summary.json
        if: always()

      - name: Export OpenAPI JSON (non-blocking)
        run: pnpm -C apps/api openapi:export || (echo "OpenAPI export failed (non-blocking)" && exit 0)

      - name: Upload OpenAPI artifact (non-blocking)
        uses: actions/upload-artifact@v4
        with:
          name: openapi-json
          path: apps/api/openapi.json
        if: always()

  e2e-db:
    name: E2E (DB, Testcontainers)
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        run: pnpm install --frozen-lockfile=false

      - name: Run DB E2E (Testcontainers)
        env:
          RUN_DB_TESTS: 'true'
        run: pnpm test:db

  release-check:
    name: Release Check (Docker build + smoke)
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t movie-mate:test -f Dockerfile .

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: movie-mate:test
          severity: CRITICAL
          ignore-unfixed: true
          format: table
          output: trivy-image.txt

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image
          path: trivy-image.txt
        if: always()

      - name: Run container and liveness smoke test
        run: |
          docker run -d --rm -p 3000:3000 --name mm-test \
            -e JWT_SECRET=test-secret-ci-access-1234567890 \
            -e JWT_REFRESH_SECRET=test-secret-ci-refresh-1234567890 \
            movie-mate:test
          for i in {1..30}; do \
            curl -fsS http://127.0.0.1:3000/api/v1/health && exit 0 || sleep 1; \
          done; \
          echo "Service did not become healthy"; \
          docker logs mm-test || true; \
          exit 1

      - name: Stop container
        if: always()
        run: docker stop mm-test || true

      - name: Run readiness smoke test with Postgres
        run: |
          # Create network and start Postgres
          docker network create mm-net || true
          docker run -d --rm --name mm-db --network mm-net \
            -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=app postgres:16-alpine
          # Start API with DATABASE_URL pointing to mm-db
          docker run -d --rm --network mm-net -p 3000:3000 --name mm-test \
            -e DATABASE_URL=postgresql://postgres:postgres@mm-db:5432/app \
            -e JWT_SECRET=test-secret-ci-access-1234567890 \
            -e JWT_REFRESH_SECRET=test-secret-ci-refresh-1234567890 \
            movie-mate:test
          # Wait for readiness
          for i in {1..60}; do \
            curl -fsS http://127.0.0.1:3000/api/v1/health/ready && exit 0 || sleep 1; \
          done; \
          echo "Service did not become ready"; \
          docker logs mm-test || true; \
          docker logs mm-db || true; \
          exit 1

      - name: Stop containers (readiness)
        if: always()
        run: |
          docker stop mm-test || true
          docker stop mm-db || true
          docker network rm mm-net || true

  migrate-dry-run:
    name: Prisma Migrate Dry Run
    runs-on: ubuntu-latest
    needs: build-test
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        run: pnpm install --frozen-lockfile=false

      - name: Wait for Postgres (short)
        run: sleep 3

      - name: Prisma migrate deploy (dry-run DB)
        run: |
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/app \
          pnpm exec prisma migrate deploy --schema packages/@infra/prisma/prisma/schema.prisma

      - name: Prisma migrate status (non-blocking)
        run: |
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/app \
          pnpm exec prisma migrate status --schema packages/@infra/prisma/prisma/schema.prisma || true
